/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Cluster is the Schema for the clusters API
 */
export interface Cluster {
  /**
   * APIVersion defines the versioned schema of this representation of an object.
   * Servers should convert recognized schemas to the latest internal value, and
   * may reject unrecognized values.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents.
   * Servers may infer this from the endpoint the client submits requests to.
   * Cannot be updated.
   * In CamelCase.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {};
  /**
   * spec defines the desired state of Cluster
   */
  spec?: {
    /**
     * csi defines the configuration of the Container Storage Interface (CSI).
     */
    csi?: {
      /**
       * sidecar specifies configuration options for the CSI sidecar pods
       */
      sidecar?: {
        /**
         * nodeSelector is the label selector for CSI sidecar pods. Nodes that do not run an IBM Storage Scale core pod are ignored for scheduling CSI sidecar pods.
         */
        nodeSelector?: {
          [k: string]: string;
        };
      };
    };
    /**
     * It tells the operator how to configure the gpfs daemons.
     */
    daemon?: {
      /**
       * clusterName overrides the default name, which is that of the Daemon resource itself postpended with any resolved domain suffix.
       */
      clusterNameOverride?: string;
      /**
       * IBM Spectrum Scale configuration parameters for the cluster.
       * Changing these values is unsupported and should
       * not be changed unless advised by IBM Support
       */
      clusterProfile?: {
        afmAsyncDelay?: string;
        afmDIO?: string;
        afmHashVersion?: string;
        afmMaxParallelRecoveries?: string;
        afmObjKeyExpiration?: string;
        backgroundSpaceReclaimThreshold?: string;
        cloudEnv?: "general";
        controlSetxattrImmutableSELinux?: string;
        encryptionKeyCacheExpiration?: string;
        enforceFilesetQuotaOnRoot?: string;
        ignorePrefetchLUNCount?: string;
        ignoreReplicaSpaceOnStat?: "yes" | "no";
        ignoreReplicationForQuota?: "yes" | "no";
        ignoreReplicationOnStatfs?: "yes" | "no";
        initPrefetchBuffers?: string;
        maxBufferDescs?: string;
        maxMBpS?: string;
        maxTcpConnsPerNodeConn?: string;
        maxblocksize?: string;
        nsdMaxWorkerThreads?: string;
        nsdMinWorkerThreads?: string;
        nsdMultiQueue?: string;
        nsdRAIDBlockDeviceMaxSectorsKB?: string;
        nsdRAIDBlockDeviceNrRequests?: string;
        nsdRAIDBlockDeviceQueueDepth?: string;
        nsdRAIDBlockDeviceScheduler?: string;
        nsdRAIDBufferPoolSizePct?: string;
        nsdRAIDDefaultGeneratedFD?: string;
        nsdRAIDDiskCheckVWCE?: string;
        nsdRAIDEventLogToConsole?: string;
        nsdRAIDFlusherFWLogHighWatermarkMB?: string;
        nsdRAIDMasterBufferPoolSize?: string;
        nsdRAIDMaxPdiskQueueDepth?: string;
        nsdRAIDMaxRecoveryRetries?: string;
        nsdRAIDMaxTransientStale2FT?: string;
        nsdRAIDMaxTransientStale3FT?: string;
        nsdRAIDNonStealableBufPct?: string;
        nsdRAIDReadRGDescriptorTimeout?: string;
        nsdRAIDReconstructAggressiveness?: string;
        nsdRAIDSmallThreadRatio?: string;
        nsdRAIDThreadsPerQueue?: string;
        nsdRAIDTracks?: string;
        nsdSmallThreadRatio?: string;
        nspdBufferMemPerQueue?: string;
        nspdQueues?: string;
        nspdThreadsPerQueue?: string;
        numaMemoryInterleave?: string;
        pagepoolMaxPhysMemPct?: string;
        panicOnIOHang?: string;
        pitWorkerThreadsPerNode?: string;
        prefetchPct?: string;
        prefetchThreads?: string;
        prefetchTimeout?: string;
        proactiveReconnect?: "yes" | "no";
        qMaxBlockShare?: string;
        qRevokeDisable?: string;
        readReplicaPolicy?: "default" | "local" | "fastest";
        seqDiscardThreshold?: string;
        traceGenSubDir?: "/var/mmfs/tmp/traces";
        tscCmdAllowRemoteConnections?: "yes" | "no";
        tscCmdPortRange?: string;
        verbsPorts?: string;
        verbsRdma?: "enable" | "disable";
        verbsRdmaCm?: "enable" | "disable";
        verbsRdmaSend?: "yes" | "no";
      };
      /**
       * hostAliases that will be added to the internal DNS that resolves hosts for core pods
       */
      hostAliases?: {
        /**
         * Hostname for the associated IP address.
         */
        hostname: string;
        /**
         * IP address of the host file entry.
         */
        ip: string;
      }[];
      /**
       * nodeSelector will be applied to daemon core pods. The selectors in this field are ANDed.
       * This means that only nodes are selected which have all labels of this field.
       * This field is logically ANDed with any nodeSelectorExpressions also configured.
       */
      nodeSelector?: {
        [k: string]: string;
      };
      /**
       * nodeSelectorExpressions that will apply to daemon core pods. This field is logically ANDed with any nodeSelector also configured.
       */
      nodeSelectorExpressions?: {
        /**
         * The label key that the selector applies to.
         */
        key: string;
        /**
         * Represents a key's relationship to a set of values.
         * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
         */
        operator: string;
        /**
         * An array of string values. If the operator is In or NotIn,
         * the values array must be non-empty. If the operator is Exists or DoesNotExist,
         * the values array must be empty. If the operator is Gt or Lt, the values
         * array must have a single element, which will be interpreted as an integer.
         * This array is replaced during a strategic merge patch.
         */
        values?: string[];
      }[];
      /**
       * nsdDevicesConfig allows users to specify non-standard device names in order to override or enhance the disk discovery process.
       * This parameter must only be specified when using a local filesystem with devices that use non-standard device names.
       */
      nsdDevicesConfig?: {
        /**
         * bypassDiscovery allows bypass of automatic disk discovery. If set to true, only the set of devices
         * defined by the localDevicePaths will be used. If set to false, the automatic device discovery will find
         * devices with standard device names.
         */
        bypassDiscovery?: true | false;
        /**
         * localDevicePaths specifies the device names and device types.
         */
        localDevicePaths?: {
          /**
           * devicePath specifies nsd device names. Allows wildcards.
           * For example: '/dev/sdd', '/dev/pvc*', ...
           */
          devicePath?: string;
          /**
           * deviceType specifies the device type.
           * For example: 'dmm', 'vpath', 'generic', ...
           */
          deviceType?: string;
        }[];
      };
      /**
       * roles specify the IBM Spectrum Scale configuration parameters for nodes that apply to a role.
       * Specifying configuration parameters for roles is optional and does overwrite a set of default parameters.
       */
      roles?: {
        /**
         * The Memory/CPU resource limits that will be set for Scale core pods.
         */
        limits?: {
          /**
           * CPU is measured in cpu units (i.e 1, 2, 100m, 2500m)
           */
          cpu?: string;
          /**
           * Memory is measured in bytes as plain integer or with kubernetes supported suffixes (i.e 128974848, 129e6, 129M, 123Mi).
           * The value is the maximum amount of memory the Scale core pod is allowed to consume.
           */
          memory?: string;
        };
        /**
         * Name of the role. Only afm, storage or client are allowed.
         */
        name?: "afm" | "storage" | "client";
        /**
         * IBM Spectrum Scale node-scoped configuration parameters.
         * Changing these values is unsupported and should
         * not be changed unless advised by IBM Support
         */
        profile?: {
          afmMaxParallelRecoveries?: string;
          backgroundSpaceReclaimThreshold?: string;
          controlSetxattrImmutableSELinux?: string;
          ignorePrefetchLUNCount?: string;
          initPrefetchBuffers?: string;
          maxBufferDescs?: string;
          maxMBpS?: string;
          maxTcpConnsPerNodeConn?: string;
          maxblocksize?: string;
          nsdMaxWorkerThreads?: string;
          nsdMinWorkerThreads?: string;
          nsdMultiQueue?: string;
          nsdRAIDBlockDeviceMaxSectorsKB?: string;
          nsdRAIDBlockDeviceNrRequests?: string;
          nsdRAIDBlockDeviceQueueDepth?: string;
          nsdRAIDBlockDeviceScheduler?: string;
          nsdRAIDBufferPoolSizePct?: string;
          nsdRAIDDefaultGeneratedFD?: string;
          nsdRAIDDiskCheckVWCE?: string;
          nsdRAIDEventLogToConsole?: string;
          nsdRAIDFlusherFWLogHighWatermarkMB?: string;
          nsdRAIDMasterBufferPoolSize?: string;
          nsdRAIDMaxPdiskQueueDepth?: string;
          nsdRAIDMaxRecoveryRetries?: string;
          nsdRAIDMaxTransientStale2FT?: string;
          nsdRAIDMaxTransientStale3FT?: string;
          nsdRAIDNonStealableBufPct?: string;
          nsdRAIDReadRGDescriptorTimeout?: string;
          nsdRAIDReconstructAggressiveness?: string;
          nsdRAIDSmallThreadRatio?: string;
          nsdRAIDThreadsPerQueue?: string;
          nsdRAIDTracks?: string;
          nsdSmallThreadRatio?: string;
          nspdBufferMemPerQueue?: string;
          nspdQueues?: string;
          nspdThreadsPerQueue?: string;
          numaMemoryInterleave?: string;
          pagepoolMaxPhysMemPct?: string;
          panicOnIOHang?: string;
          pitWorkerThreadsPerNode?: string;
          prefetchPct?: string;
          prefetchThreads?: string;
          prefetchTimeout?: string;
          proactiveReconnect?: "yes" | "no";
          seqDiscardThreshold?: string;
          tscCmdPortRange?: string;
          verbsPorts?: string;
          verbsRdma?: "enable" | "disable";
          verbsRdmaCm?: "enable" | "disable";
          verbsRdmaSend?: "yes" | "no";
        };
        /**
         * The Memory/CPU resource requests that will be set for Scale core pods.
         */
        resources?: {
          /**
           * CPU is measured in cpu units (i.e 1, 2, 100m, 2500m)
           */
          cpu?: string;
          /**
           * Memory is measured in bytes as plain integer or with kubernetes supported suffixes (i.e 128974848, 129e6, 129M, 123Mi).
           * The value is a target and will be requested for Scale core pods.
           * Resource request limits on containers impact pod scheduling and bin packing.
           */
          memory?: string;
        };
      }[];
      /**
       * tolerations that are applied to daemon core pods.
       */
      tolerations?: {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects.
         * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys.
         * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value.
         * Valid operators are Exists and Equal. Defaults to Equal.
         * Exists is equivalent to wildcard for value, so that a pod can
         * tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be
         * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
         * it is not set, which means tolerate the taint forever (do not evict). Zero and
         * negative values will be treated as 0 (evict immediately) by the system.
         */
        tolerationSeconds?: number;
        /**
         * Value is the taint value the toleration matches to.
         * If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }[];
      /**
       * update defines the update behavior of the Scale core pods. If not specified, all core pods are updated one by one.
       */
      update?: {
        /**
         * maxUnavailable defines either an integer number or percentage of core pods
         * and nodes that can go Unavailable during an update. This only affects core
         * pods that do not reside in any update pool (see `pools` parameter).
         * The default value is 1. A value larger than 1 will mean multiple core pods
         * and nodes going unavailable during the update, which causes that PV storage
         * of Storage Scale CSI is unavailable and may affect your workload stress on
         * the remaining nodes. You cannot set this value to 0 to stop updates;
         * to stop updates, use the 'paused' property instead.
         */
        maxUnavailable?: number | string;
        /**
         * paused specifies whether or not updates should be stopped. This only affects
         * core pods that do not reside in any update pool (see `pools` parameter).
         */
        paused?: boolean;
        /**
         * pools describe a set of update pools. An update pool describes the update
         * behavior of selected core pods, for example how many pods can be updated in
         * parallel.
         */
        pools?: {
          /**
           * maxUnavailable defines either an integer number or percentage of core pods
           * and nodes in the pool that can go Unavailable during an update.
           * The default value is 1. A value larger than 1 will mean multiple core pods
           * and nodes going unavailable during the update, which causes that PV storage
           * of Storage Scale CSI is unavailable and may affect your workload stress on
           * the remaining nodes. You cannot set this value to 0 to stop updates;
           * to stop updates, use the 'paused' property instead.
           * This parameter must not be specified if the update pool references to an
           * Openshift MachineConfigPool (means pool name has "mcp/" prefix).
           */
          maxUnavailable?: number | string;
          /**
           * name is the name of the update pool. This pool references to an OpenShift
           * MachineConfigPool if the name has a "mcp/" prefix (for example "mcp/worker").
           */
          name: string;
          /**
           * nodeSelector selects the Kubernetes nodes that host the core pods that belong
           * to this update pool. Nodes that do not host a core pod are ignored.
           * This parameter must not be specified if the update pool references to an
           * Openshift MachineConfigPool (means pool name has "mcp/" prefix).
           */
          nodeSelector?: {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: {
              /**
               * key is the label key that the selector applies to.
               */
              key: string;
              /**
               * operator represents a key's relationship to a set of values.
               * Valid operators are In, NotIn, Exists and DoesNotExist.
               */
              operator: string;
              /**
               * values is an array of string values. If the operator is In or NotIn,
               * the values array must be non-empty. If the operator is Exists or DoesNotExist,
               * the values array must be empty. This array is replaced during a strategic
               * merge patch.
               */
              values?: string[];
            }[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {
              [k: string]: string;
            };
          };
          /**
           * paused specifies whether or not updates to this update pool should be stopped.
           * This parameter is ignored if the update pool references to an Openshift
           * MachineConfigPool (means pool name has "mcp/" prefix).
           */
          paused?: boolean;
        }[];
      };
    };
    /**
     * It tells the operator how to configure Grafana Bridge.
     */
    grafanaBridge?: {
      enablePrometheusExporter?: boolean;
      /**
       * nodeSelector specifies the criteria used to determine which nodes deploy grafana bridge pods.
       */
      nodeSelector?: {
        [k: string]: string;
      };
      /**
       * tolerations is applied to grafana bridge pods
       */
      tolerations?: {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects.
         * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys.
         * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value.
         * Valid operators are Exists and Equal. Defaults to Equal.
         * Exists is equivalent to wildcard for value, so that a pod can
         * tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be
         * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
         * it is not set, which means tolerate the taint forever (do not evict). Zero and
         * negative values will be treated as 0 (evict immediately) by the system.
         */
        tolerationSeconds?: number;
        /**
         * Value is the taint value the toleration matches to.
         * If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }[];
    };
    /**
     * It tells the operator how to configure the GUIs.
     */
    gui?: {
      /**
       * containerResources allow to specify memory and CPU requests and limits for containers of GUI pods.
       * In large clusters with high number of PersistentVolumes the GUI containers require more resources than default values.
       */
      containerResources?: {
        /**
         * name is the container name.
         */
        name: "liberty" | "postgres";
        /**
         * resources defines the resources for this container
         */
        resources: {
          /**
           * Claims lists the names of resources, defined in spec.resourceClaims,
           * that are used by this container.
           *
           *
           * This is an alpha field and requires enabling the
           * DynamicResourceAllocation feature gate.
           *
           *
           * This field is immutable. It can only be set for containers.
           */
          claims?: {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
          }[];
          /**
           * Limits describes the maximum amount of compute resources allowed.
           * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
           */
          limits?: {
            [k: string]: number | string;
          };
          /**
           * Requests describes the minimum amount of compute resources required.
           * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
           * otherwise to an implementation-defined value. Requests cannot exceed Limits.
           * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
           */
          requests?: {
            [k: string]: number | string;
          };
        };
      }[];
      /**
       * enableSessionIPCheck verifies that all requests to GUI within the same session are send from the same client IP.
       * Enabling this flag prevents session hijacking. Without IP validation, if an attacker intercepts the session ID,
       * the attacker can potentially use the session ID from another IP address without being detected.
       * The client IP check can be disabled in case a load balancer causes that the requests to GUI within same session are send by different IPs.
       */
      enableSessionIPCheck?: boolean;
      /**
       * nodeSelector that is applied to GUI pods
       */
      nodeSelector?: {
        [k: string]: string;
      };
      /**
       * tolerations that are applied to GUI pods
       */
      tolerations?: {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects.
         * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys.
         * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value.
         * Valid operators are Exists and Equal. Defaults to Equal.
         * Exists is equivalent to wildcard for value, so that a pod can
         * tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be
         * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
         * it is not set, which means tolerate the taint forever (do not evict). Zero and
         * negative values will be treated as 0 (evict immediately) by the system.
         */
        tolerationSeconds?: number;
        /**
         * Value is the taint value the toleration matches to.
         * If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }[];
    };
    /**
     * The license must be accepted by the end user that provides a way to specify the IBM Spectrum Scale Edition.
     */
    license: {
      /**
       * Read the license and specify "true" to accept or "false" to not accept.
       * https://www.ibm.com/support/customer/csol/terms/?id=L-TUSS-597F38
       * BY DOWNLOADING, INSTALLING, COPYING, ACCESSING, CLICKING ON AN "ACCEPT" BUTTON, OR OTHERWISE USING THE PROGRAM, LICENSEE AGREES TO THE TERMS OF THIS AGREEMENT. IF YOU ARE ACCEPTING THESE TERMS ON BEHALF OF LICENSEE, YOU REPRESENT AND WARRANT THAT YOU HAVE FULL AUTHORITY TO BIND LICENSEE TO THESE TERMS. IF YOU DO NOT AGREE TO THESE TERMS,
       * * DO NOT DOWNLOAD, INSTALL, COPY, ACCESS, CLICK ON AN "ACCEPT" BUTTON, OR USE THE PROGRAM; AND
       * * PROMPTLY RETURN THE UNUSED MEDIA AND DOCUMENTATION TO THE PARTY FROM WHOM IT WAS OBTAINED FOR A REFUND OF THE AMOUNT PAID. IF THE PROGRAM WAS DOWNLOADED, DESTROY ALL COPIES OF THE PROGRAM.
       */
      accept: true;
      /**
       * It specifies the IBM Spectrum Scale edition, "data-access" or "data-management".
       */
      license: "data-access" | "data-management" | "erasure-code";
    };
    /**
     * It tells the operator how to configure NetworkPolicies
     */
    networkPolicy?: {};
    /**
     * It tells the operator how to configure the pmcollectors.
     */
    pmcollector?: {
      /**
       * nodeSelector that is applied to pmcollector pods
       */
      nodeSelector?: {
        [k: string]: string;
      };
      /**
       * storageClass is used for creating PVCs for pmcollector pods, if not specified default storage class 'ibm-spectrum-scale-internal' is used.
       * Modifying this field will delete existing PVCs and create new ones with the updated storage class. This leads to the loss of the historical performance data.
       */
      storageClass?: string;
      /**
       * tolerations that are applied to pmcollector pods
       */
      tolerations?: {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects.
         * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys.
         * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value.
         * Valid operators are Exists and Equal. Defaults to Equal.
         * Exists is equivalent to wildcard for value, so that a pod can
         * tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be
         * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
         * it is not set, which means tolerate the taint forever (do not evict). Zero and
         * negative values will be treated as 0 (evict immediately) by the system.
         */
        tolerationSeconds?: number;
        /**
         * Value is the taint value the toleration matches to.
         * If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }[];
    };
    /**
     * It tells the operator how to configure Regional DR.
     */
    regionalDR?: {
      /**
       * nodeSelector will be applied to regionaldr pods.
       */
      nodeSelector?: {
        [k: string]: string;
      };
      /**
       * tolerations that are applied to regionaldr pod.
       */
      tolerations?: {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects.
         * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys.
         * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value.
         * Valid operators are Exists and Equal. Defaults to Equal.
         * Exists is equivalent to wildcard for value, so that a pod can
         * tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be
         * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
         * it is not set, which means tolerate the taint forever (do not evict). Zero and
         * negative values will be treated as 0 (evict immediately) by the system.
         */
        tolerationSeconds?: number;
        /**
         * Value is the taint value the toleration matches to.
         * If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }[];
    };
    /**
     * Tells the operator how to configure site zone name resolution.
     * Site zones must be authoritative.
     */
    site?: {
      /**
       * name is the site name.
       */
      name: string;
      /**
       * zone is the domain name that IBM Spectrum Scale DNS records for this site will be managed.
       * This will be used to resolve node names for IBM Spectrum Scale.
       */
      zone: string;
    };
  };
  /**
   * status defines the observed state of Cluster
   */
  status?: {
    conditions?: {
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: string;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: number;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: "True" | "False" | "Unknown";
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       * ---
       * Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
       * useful (see .node.status.conditions), the ability to deconflict is important.
       * The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
       */
      type: string;
    }[];
  };
}
