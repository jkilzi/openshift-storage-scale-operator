/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * LocalVolumeDiscoveryResult is the Schema for the localvolumediscoveryresults API
 */
export interface LocalVolumeDiscoveryResult {
  /**
   * APIVersion defines the versioned schema of this representation of an object.
   * Servers should convert recognized schemas to the latest internal value, and
   * may reject unrecognized values.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents.
   * Servers may infer this from the endpoint the client submits requests to.
   * Cannot be updated.
   * In CamelCase.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {};
  /**
   * LocalVolumeDiscoveryResultSpec defines the desired state of LocalVolumeDiscoveryResult
   */
  spec?: {
    /**
     * Node on which the devices are discovered
     */
    nodeName: string;
  };
  /**
   * LocalVolumeDiscoveryResultStatus defines the observed state of LocalVolumeDiscoveryResult
   */
  status?: {
    /**
     * DiscoveredDevices contains the list of devices which are usable
     * for creating LocalDisks
     * The devices in this list qualify these following conditions.
     * - it should be a non-removable device.
     * - it should not be a read-only device.
     * - it should not be mounted anywhere
     * - it should not be a boot device
     * - it should not have child partitions
     * - it should have a WWN value
     */
    discoveredDevices?: {
      /**
       * WWN defines the WWN value of the device.
       */
      WWN: string;
      /**
       * DeviceID represents the persistent name of the device. For eg, /dev/disk/by-id/...
       */
      deviceID: string;
      /**
       * Model of the discovered device
       */
      model: string;
      /**
       * Path represents the device path. For eg, /dev/sdb
       */
      path: string;
      /**
       * Size of the discovered device
       */
      size: number;
      /**
       * Type of the discovered device
       */
      type: string;
      /**
       * Vendor of the discovered device
       */
      vendor: string;
    }[];
    /**
     * DiscoveredTimeStamp is the last timestamp when the list of discovered devices was updated
     */
    discoveredTimeStamp?: string;
  };
}
